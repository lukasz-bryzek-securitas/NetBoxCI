name: Create Infrastructure (Managed Identity)

on:
  workflow_dispatch:
    inputs:
      resourceGroupName:
        description: 'Name of the Resource Group'
        required: true
        default: 'SCC-SB-CORP-GIT-NETBOX'
      location:
        description: 'Azure Region'
        required: true
        default: 'westeurope'
      clusterName:
        description: 'AKS Cluster Name'
        required: true
        default: 'scc-sb-corp-git-netbox-ci-aks'
      kubernetesVersion:
        description: 'Kubernetes Version'
        required: true
        default: '1.32.4'
      nodeCount:
        description: 'Node Count'
        required: true
        default: '2'
      nodeSize:
        description: 'VM Size for Nodes'
        required: true
        default: 'Standard_B2ms'

permissions:
  id-token: write
  contents: read

jobs:
  create-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create Resource Group
        run: |
          # Check if resource group exists using explicit comparison
          RG_EXISTS_RESULT=$(az group exists --name ${{ github.event.inputs.resourceGroupName }})
          echo "DEBUG: az group exists returned: $RG_EXISTS_RESULT"
          
          if [ "$RG_EXISTS_RESULT" = "true" ]; then
            echo "✅ Resource group ${{ github.event.inputs.resourceGroupName }} already exists"
          else
            echo "🔨 Creating resource group ${{ github.event.inputs.resourceGroupName }} with mandatory tags"
            if az group create \
              --name ${{ github.event.inputs.resourceGroupName }} \
              --location ${{ github.event.inputs.location }} \
              --tags \
                "global.finops.company-code"="110" \
                "global.finops.cost-center"="2023" \
                "global.finops.cost-owner"="Bartosz.Sajkowski@securitas.com" \
                "global.finops.country"="Global" \
                "global.finops.project-code"="90" \
                "global.finops.project-name"="Non-Project" \
                "global.operation.environment"="sandbox" \
                "global.operation.governance"="GITS‑E" \
                "global.operation.managed-by"="Jakub.Wdowiarek@securitas.com" \
                "global.tagging-version"="1.0"; then
              echo "✅ Resource group created successfully!"
            else
              echo "❌ Failed to create resource group!"
              exit 1
            fi
          fi

      - name: Register Azure Resource Providers
        run: |
          echo "🔄 Registering required Azure resource providers..."
          az provider register --namespace Microsoft.ContainerService --verbose
          az provider register --namespace Microsoft.Network --verbose
          az provider register --namespace Microsoft.Storage --verbose
          az provider register --namespace Microsoft.Compute --verbose
          az provider register --namespace Microsoft.ManagedIdentity --verbose
          
          echo "⏳ Waiting for Microsoft.ContainerService to register..."
          timeout=300  # 5 minutes timeout
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            status=$(az provider show --namespace Microsoft.ContainerService --query registrationState --output tsv)
            echo "Registration status: $status (elapsed: ${elapsed}s)"
            if [ "$status" = "Registered" ]; then
              echo "✅ Microsoft.ContainerService registered successfully!"
              break
            fi
            sleep 10
            elapsed=$((elapsed + 10))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "❌ Timeout waiting for resource provider registration"
            exit 1
          fi

      - name: Get Latest Kubernetes Version
        id: k8s-version
        run: |
          echo "🔍 Getting latest available Kubernetes version for ${{ github.event.inputs.location }}..."
          
          # First, let's see what raw data we get
          echo "📊 RAW AKS VERSIONS DATA:"
          if AKS_VERSIONS_RAW=$(az aks get-versions --location ${{ github.event.inputs.location }} 2>&1); then
            echo "$AKS_VERSIONS_RAW"
          else
            echo "❌ Error getting AKS versions: $AKS_VERSIONS_RAW"
          fi
          
          echo ""
          echo "📊 KUBERNETES MAJOR VERSIONS:"
          az aks get-versions --location ${{ github.event.inputs.location }} --query "values[].version" --output tsv || echo "Failed to get versions"
          
          echo ""
          echo "📊 NON-PREVIEW MAJOR VERSIONS:"
          az aks get-versions --location ${{ github.event.inputs.location }} --query "values[?isPreview != \`true\`].version" --output tsv || echo "Failed to get non-preview versions"
          
          echo ""
          echo "📊 GETTING LATEST PATCH VERSION:"
          # Get the latest non-preview major version
          LATEST_MAJOR=$(az aks get-versions --location ${{ github.event.inputs.location }} --query "values[?isPreview != \`true\`].version" --output tsv | sort -V | tail -n 1)
          echo "Latest non-preview major version: $LATEST_MAJOR"
          
          # Get the latest patch version for that major version
          if [ -n "$LATEST_MAJOR" ]; then
            LATEST_VERSION=$(az aks get-versions --location ${{ github.event.inputs.location }} --query "values[?version=='$LATEST_MAJOR'].patchVersions | [0] | keys(@)" --output tsv | sort -V | tail -n 1)
            echo "Latest patch version: $LATEST_VERSION"
          else
            LATEST_VERSION=""
          fi
          
          # Fallback to known stable version if query fails
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            LATEST_VERSION="1.32.4"
            echo "⚠️ Using fallback K8s version: $LATEST_VERSION"
          else
            echo "✅ Latest K8s version found: $LATEST_VERSION"
          fi
          
          echo "K8S_VERSION=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          # Show first few available patch versions for debugging
          echo ""
          echo "📊 Available patch versions for $LATEST_MAJOR:"
          if [ -n "$LATEST_MAJOR" ]; then
            az aks get-versions --location ${{ github.event.inputs.location }} --query "values[?version=='$LATEST_MAJOR'].patchVersions | [0] | keys(@)" --output tsv | sort -V | head -5 || echo "Error getting patch versions"
          else
            echo "No major version found"
          fi

      - name: Create AKS Cluster
        run: |
          bash ./scripts/create-aks.sh \
            ${{ github.event.inputs.resourceGroupName }} \
            ${{ github.event.inputs.clusterName }} \
            ${{ github.event.inputs.location }} \
            ${{ steps.k8s-version.outputs.K8S_VERSION }} \
            ${{ github.event.inputs.nodeCount }} \
            ${{ github.event.inputs.nodeSize }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ github.event.inputs.resourceGroupName }} \
            --name ${{ github.event.inputs.clusterName }} \
            --admin

      - name: Create GitHub Runner Namespace
        run: |
          kubectl create namespace github-runners
          
      - name: Set Output Variables
        id: vars
        run: |
          echo "CLUSTER_NAME=${{ github.event.inputs.clusterName }}" >> $GITHUB_OUTPUT
          echo "RESOURCE_GROUP=${{ github.event.inputs.resourceGroupName }}" >> $GITHUB_OUTPUT
          echo "LOCATION=${{ github.event.inputs.location }}" >> $GITHUB_OUTPUT
      
      - name: Summary
        run: |
          echo "Infrastructure created successfully:"
          echo "Resource Group: ${{ github.event.inputs.resourceGroupName }}"
          echo "AKS Cluster: ${{ github.event.inputs.clusterName }}"
          echo "Location: ${{ github.event.inputs.location }}"
          echo "Kubernetes Version: ${{ steps.k8s-version.outputs.K8S_VERSION }} (auto-selected)"
          echo "Node Count: ${{ github.event.inputs.nodeCount }}"
          echo "Node Size: ${{ github.event.inputs.nodeSize }}"
